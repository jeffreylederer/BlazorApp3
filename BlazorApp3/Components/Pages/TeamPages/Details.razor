@page "/teams/details"
@inject BlazorApp3.Model.TournamentContext DB
@using BlazorApp3.Model
@inject NavigationManager NavigationManager
@using Microsoft.EntityFrameworkCore

<PageTitle>Details</PageTitle>

<h1>Details</h1>

<div>
    <h4>Team</h4>
    <hr />
    @if (team is null)
    {
        <p><em>Loading...</em></p>
    }
    else {
        <dl class="row">
            <dt class="col-sm-2">Skip</dt>
            <dd class="col-sm-10">@team.Skip</dd>
            @{
                if(league.TeamSize==3)
                {
                    <dt class="col-sm-2">ViceSkip</dt>
                    <dd class="col-sm-10">@team.ViceSkip</dd>
                }
            }
            @{
                if(league.TeamSize>1)
                {
                    <dt class="col-sm-2">Lead</dt>
                    <dd class="col-sm-10">@team.Lead</dd>
                }
            }

             <dt class="col-sm-2">TeamNo</dt>
            <dd class="col-sm-10">@team.TeamNo</dd>
            <dt class="col-sm-2">DivisionId</dt>
            <dd class="col-sm-10">@team.DivisionId</dd>
        </dl>
        <div>
            <a href="@($"/teams/edit?id={team.Id}")">Edit</a> |
            <a href="@($"/teams")">Back to List</a>
        </div>
    }
</div>

@code {
    TeamsView? team;

    [SupplyParameterFromQuery]
    public int Id { get; set; }
    public League? league;

    protected override async Task OnInitializedAsync()
    {
        team = await DB.TeamsViews.Where(x => x.Id == Id).FirstOrDefaultAsync();
        league = DB.Leagues.Find(team.Leagueid);

        if (team is null)
        {
            NavigationManager.NavigateTo("notfound");
        }
    }
}
