@page "/teams/delete"
@inject BlazorApp3.Model.TournamentContext DB
@using BlazorApp3.Code
@using BlazorApp3.Model
@inject NavigationManager NavigationManager
@using Microsoft.EntityFrameworkCore
@using Microsoft.AspNetCore.Components.Server.ProtectedBrowserStorage
@using System.Text
@inject ProtectedSessionStorage ProtectedSessionStore
@rendermode InteractiveServer


<PageTitle>Delete</PageTitle>

<h1>Delete</h1>
<span style="color:red;font-weight:bold; font-size:large;">@message</span>

<h3>Are you sure you want to delete this?</h3>
<div>
    <h4>Team</h4>
    <hr />
    @if (team is null)
    {
        <p><em>Loading...</em></p>
    }
    else {
        <dl class="row">
            <dt class="col-sm-2">Skip</dt>
            <dd class="col-sm-10">@teamview.Skip</dd>
        </dl>
        if(league.TeamSize==3)
        {
            <dl class="row">
                <dt class="col-sm-2">ViceSkip</dt>
                <dd class="col-sm-10">@teamview.ViceSkip</dd>
            </dl>
        }
        if(league.TeamSize>1)
        {
            <dl class="row">
                <dt class="col-sm-2">Lead</dt>
                <dd class="col-sm-10">@teamview.Lead</dd>
            </dl>
        }
        <dl class="row">
            <dt class="col-sm-2">TeamNo</dt>
            <dd class="col-sm-10">@team.TeamNo</dd>
        </dl>
        <dl class="row">
            <dt class="col-sm-2">DivisionId</dt>
            <dd class="col-sm-10">@team.DivisionId</dd>
        </dl>
        <EditForm method="post" Model="team" OnValidSubmit="DeleteTeam" FormName="delete" Enhance>
            <button type="submit" class="btn btn-danger" disabled="@(team is null)">Delete</button> |
            <a href="/teams">Back to List</a>
        </EditForm>
    }
</div>

@code {
    Team? team;
    TeamsView? teamview;
    string message = "";
    League? league;

    [SupplyParameterFromQuery]
    public int Id { get; set; }

    protected override async Task OnInitializedAsync()
    {
        team = await DB.Teams.FirstOrDefaultAsync(m => m.Id == Id);
        teamview = await DB.TeamsViews.FirstOrDefaultAsync(m => m.Id == Id);
        league = await DB.Leagues.FirstOrDefaultAsync(m => m.Id == team.Leagueid);

        if (team is null)
        {
            NavigationManager.NavigateTo("notfound");
        }
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (team != null)
        {
            await ProtectedSessionStore.SetAsync("row", Convert.ToBase64String(team.Rowversion));
        }
    }

    public async Task DeleteTeam()
    {
        try
        {
            await Task.Delay(1000);
            var result = await ProtectedSessionStore.GetAsync<string>("row");
            if (result.Success)
                team.Rowversion = Encoding.ASCII.GetBytes(result.Value);
            DB.Teams.Remove(team!);
            await DB.SaveChangesAsync();
            CheckTeamApp.OrderTeam(team.Leagueid);

        }
        catch (DbUpdateConcurrencyException)
        {
            message = "Team cannot be deleted because the record has been altered or deleted since this page was loaded";
            return;
        }
        catch (DbUpdateException ex)
        {
            message = "Team cannot be deleted because this team is assigned to a match";
            return;
        }
        catch (Exception ex)
        {
            message = ex.Message;
            return;
        }
        NavigationManager.NavigateTo("/teams");
    }
}
