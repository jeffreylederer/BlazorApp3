@page "/leagues/delete"

@using BlazorApp3.Components.Layout
@inherits LayoutComponentBase
@layout LeagueLayout

@inject BlazorApp3.Model.TournamentContext DB
@using BlazorApp3.Model
@inject NavigationManager NavigationManager
@using Microsoft.EntityFrameworkCore


<PageTitle>Delete</PageTitle>

<h1>Delete</h1>

<h3>Are you sure you want to delete this?</h3>
<div>
    <h4>League</h4>
    <span style="color:red;font-weight:bold; font-size:large;">@message</span>
    <hr />
    @if (league is null)
    {
        <p><em>Loading...</em></p>
    }
    else {
        <dl class="row">
            <dt class="col-sm-2">LeagueName</dt>
            <dd class="col-sm-10">@league.LeagueName</dd>
        </dl>
        <dl class="row">
            <dt class="col-sm-2">Active</dt>
            <dd class="col-sm-10">@league.Active</dd>
        </dl>
        <dl class="row">
            <dt class="col-sm-2">TeamSize</dt>
            <dd class="col-sm-10">@league.TeamSize</dd>
        </dl>
        <dl class="row">
            <dt class="col-sm-2">TiesAllowed</dt>
            <dd class="col-sm-10">@league.TiesAllowed</dd>
        </dl>
        <dl class="row">
            <dt class="col-sm-2">PointsCount</dt>
            <dd class="col-sm-10">@league.PointsCount</dd>
        </dl>
        <dl class="row">
            <dt class="col-sm-2">WinPoints</dt>
            <dd class="col-sm-10">@league.WinPoints</dd>
        </dl>
        <dl class="row">
            <dt class="col-sm-2">TiePoints</dt>
            <dd class="col-sm-10">@league.TiePoints</dd>
        </dl>
        <dl class="row">
            <dt class="col-sm-2">ByePoints</dt>
            <dd class="col-sm-10">@league.ByePoints</dd>
        </dl>
        <dl class="row">
            <dt class="col-sm-2">StartWeek</dt>
            <dd class="col-sm-10">@league.StartWeek</dd>
        </dl>
        <dl class="row">
            <dt class="col-sm-2">PointsLimit</dt>
            <dd class="col-sm-10">@league.PointsLimit</dd>
        </dl>
        <dl class="row">
            <dt class="col-sm-2">Divisions</dt>
            <dd class="col-sm-10">@league.Divisions</dd>
        </dl>
        <dl class="row">
            <dt class="col-sm-2">PlayOffs</dt>
            <dd class="col-sm-10">@league.PlayOffs</dd>
        </dl>
        <EditForm method="post" Model="league" OnValidSubmit="DeleteLeague" FormName="delete" Enhance>
            <button type="submit" class="btn btn-danger" disabled="@(league is null)">Delete</button> |
            <a href="/leagues">Back to List</a>
        </EditForm>
    }
</div>

@code {
    League? league;

    [SupplyParameterFromQuery]
    public int Id { get; set; }
    string message = "";

    protected override async Task OnInitializedAsync()
    {
        league = await DB.Leagues.FirstOrDefaultAsync(m => m.Id == Id);

        if (league is null)
        {
            NavigationManager.NavigateTo("notfound");
        }
    }


    public async Task DeleteLeague()
    {
        try
        {
           
            foreach(var item in DB.Teams.Where(x=>x.Leagueid ==league.Id))
            {
                DB.Matches.RemoveRange(DB.Matches.Where(x => x.TeamNo1 == item.Id).ToList());
                DB.Matches.RemoveRange(DB.Matches.Where(x => x.TeamNo2 == item.Id).ToList());
            }
            DB.Teams.RemoveRange(DB.Teams.Where(x => x.Leagueid == league.Id).ToList());
            DB.Players.RemoveRange(DB.Players.Where(x => x.Leagueid == league.Id).ToList());
            DB.Schedules.RemoveRange(DB.Schedules.Where(x => x.Leagueid == league.Id).ToList());
            DB.UserLeagues.RemoveRange(DB.UserLeagues.Where(x => x.LeagueId == league.Id));
            DB.Leagues.Remove(league!);
            await DB.SaveChangesAsync();
            NavigationManager.NavigateTo("/leagues");
        }
        catch (DbUpdateConcurrencyException)
        {
            message = "League cannot be deleted because the record has been altered or deleted since this page was loaded";
        }
        catch (DbUpdateException ex)
        {
            message = "League cannot be deleted because this league has teams and/or players";
        }
        catch (Exception ex)
        {
            message = ex.Message;
        }
    }
}
