@page "/schedules/delete"
@using BlazorApp3.Components.Layout
@inherits LayoutComponentBase
@layout LeagueLayout


@inject BlazorApp3.Model.TournamentContext DB
@using BlazorApp3.Model
@inject NavigationManager NavigationManager
@using Microsoft.EntityFrameworkCore
@using Microsoft.AspNetCore.Components.Server.ProtectedBrowserStorage
@using System.Text
@inject ProtectedSessionStorage ProtectedSessionStore
@rendermode InteractiveServer


<PageTitle>Delete</PageTitle>
<span style="color:red;font-weight:bold; font-size:large;">@message</span>


<h1>Delete</h1>

<h3>Are you sure you want to delete this?</h3>
<div>
    <h4>Schedule</h4>
    <hr />
    @if (schedule is null)
    {
        <p><em>Loading...</em></p>
    }
    else {
        <dl class="row">
            <dt class="col-sm-2">GameDate</dt>
            <dd class="col-sm-10">@schedule.GameDate</dd>
        </dl>
        <dl class="row">
            <dt class="col-sm-2">Cancelled</dt>
            <dd class="col-sm-10">@schedule.Cancelled</dd>
        </dl>
        <dl class="row">
            <dt class="col-sm-2">WeekDate</dt>
            <dd class="col-sm-10">@schedule.GameDate.ToString("dddd")"</dd>
        </dl>
        <dl class="row">
            <dt class="col-sm-2">PlayOffs</dt>
            <dd class="col-sm-10">@schedule.PlayOffs</dd>
        </dl>
        <EditForm method="post" Model="schedule" OnValidSubmit="DeleteSchedule" FormName="delete" Enhance>
            <button type="submit" class="btn btn-danger" disabled="@(schedule is null)">Delete</button> |
            <a href="/schedules">Back to List</a>
        </EditForm>
    }
</div>

@code {
    Schedule? schedule;
    string message = "";

    [SupplyParameterFromQuery]
    public int Id { get; set; }

    protected override async Task OnInitializedAsync()
    {
        schedule = await DB.Schedules.FirstOrDefaultAsync(m => m.Id == Id);

        if (schedule is null)
        {
            NavigationManager.NavigateTo("notfound");
        }
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (schedule != null)
        {
            await ProtectedSessionStore.SetAsync("row", Convert.ToBase64String(schedule.Rowversion));
        }
    }

    public async Task DeleteSchedule()
    {
        try
        {
            await Task.Delay(1000);
            var result = await ProtectedSessionStore.GetAsync<string>("row");
            if (result.Success)
                schedule.Rowversion = Encoding.ASCII.GetBytes(result.Value);
            DB.Schedules.Remove(schedule!);
            await DB.SaveChangesAsync();
            NavigationManager.NavigateTo("/schedules");
        }
        catch (DbUpdateConcurrencyException)
        {
            message = "Game date cannot be deleted because the record has been altered or deleted since this page was loaded";
        }
        catch (DbUpdateException )
        {
            message = "Game date cannot be deleted because this game date is assigned to a match";
        }
        catch (Exception ex)
        {
            message = ex.Message;
        }
    }
}
