@page "/schedules"
@using Microsoft.AspNetCore.Components.QuickGrid
@inject BlazorApp3.Model.TournamentContext DB
@using BlazorApp3.Model
@using Microsoft.AspNetCore.Components.Server.ProtectedBrowserStorage
@inject ProtectedSessionStorage ProtectedSessionStore
@rendermode InteractiveServer
<PageTitle>Index</PageTitle>

<h1>Index</h1>


@{
    string format = "dddd";
    if (leagueid.HasValue && league != null)
    {
        <p>
            <a href="schedules/create?leagueid=@leagueid">Create New</a>
        </p>
        <h1>@league.LeagueName</h1>
        <QuickGrid Class="table" Items="DB.Schedules.Where(x=>x.Leagueid == leagueid.Value).OrderBy(x=>x.GameDate)">
            <PropertyColumn Property="schedule => schedule.GameDate" Format="M/d/yyyy" Title="Game Date" />
            <PropertyColumn Property="schedule => schedule.Cancelled" />
            <PropertyColumn Property="schedule => schedule.GameDate.ToString(format)" Title="Week Date" />
            <PropertyColumn Property="schedule => schedule.PlayOffs" />

            <TemplateColumn Context="schedule">
                <a href="@($"schedules/edit?id={schedule.Id}")">Edit</a> |
                <a href="@($"schedules/details?id={schedule.Id}")">Details</a> |
                <a href="@($"schedules/delete?id={schedule.Id}")">Delete</a>
            </TemplateColumn>
        </QuickGrid>
    }
    else
    {
        <p>Loading...</p>
    }
}

@code {
    private int? leagueid;
    private League? league;

    protected override async Task OnAfterRenderAsync(bool firstTime)
    {
        if (firstTime)
        {
            ProtectedBrowserStorageResult<int> result = await ProtectedSessionStore.GetAsync<int>("leagueid");
            if (result.Success)
            {
                leagueid = result.Value;
                league =  DB.Leagues.Find(leagueid.Value);
                if (league != null)
                {
                    StateHasChanged();
                }
            }
        }
    }
}
