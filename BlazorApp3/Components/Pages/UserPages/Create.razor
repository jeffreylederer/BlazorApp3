@page "/users/create"
@inject BlazorApp3.Model.TournamentContext DB
@using BlazorApp3.Model
@inject NavigationManager NavigationManager
@using System.ComponentModel.DataAnnotations;
@using BlazorApp3.Services;
@using System.Security.Cryptography
@using System.Text

<PageTitle>Create</PageTitle>

<h1>Create</h1>

<h4>User</h4>
<hr />
<div class="row">
    <div class="col-md-4">
        <EditForm method="post" Model="User" OnValidSubmit="AddUser" FormName="create" Enhance>
            <DataAnnotationsValidator />
            <ValidationSummary class="text-danger" />
            <div class="mb-3">
                <label for="username" class="form-label">Username:</label> 
                <InputText id="username" @bind-Value="User.Username" class="form-control" />
                <ValidationMessage For="() => User.Username" class="text-danger" /> 
            </div>        
            <div class="mb-3">
                <label for="password" class="form-label">Password:</label> 
                <InputText id="password" @bind-Value="User.Password" class="form-control" />
                <ValidationMessage For="() => User.Password" class="text-danger" /> 
            </div>        
            <div class="mb-3">
                <label for="displayname" class="form-label">DisplayName:</label> 
                <InputText id="displayname" @bind-Value="User.DisplayName" class="form-control" />
                <ValidationMessage For="() => User.DisplayName" class="text-danger" /> 
            </div>

            <div class="mb-3">
                <label for="Role" class="form-label">Role:</label>
                <select id="Role" @bind="User.Role">
                    @{
                        foreach (var item in DB.Roles)
                        {
                            <option value="@item.Id">@item.Name</option>
                        }
                    }
                </select>
                <ValidationMessage For="() => User.Role" class="text-danger" />
            </div>
            
            <button type="submit" class="btn btn-primary">Create</button>
        </EditForm>
    </div>
</div>

<div>
    <a href="/users">Back to List</a>
</div>

@code {

    [SupplyParameterFromForm]
    private UserDTO User { get; set; } = new();

    // To protect from overposting attacks, see https://aka.ms/RazorPagesCRUD
    public async Task AddUser()
    {
        var adminUser = new User()
        {
            Username = User.Username,
            DisplayName = User.DisplayName,
            IsActive = true,
            LastLoggedIn = null,
            Password = GetSha256Hash(User.Password),
            SerialNumber = Guid.NewGuid().ToString("N")
        };
        DB.Users.Add(adminUser);
        await DB.SaveChangesAsync();
        var userRole = new UserRole()
            {
                UserId = adminUser.Id,
                RoleId = User.Role
            };
        DB.UserRoles.Add(userRole);
        await DB.SaveChangesAsync();

        NavigationManager.NavigateTo("/users");
    }

    private class UserDTO
    {
        [Display(Name = "Username")]
        [Required(ErrorMessage = "Please enter {0}")]
        public string Username { get; set; }

        [Display(Name = "Password")]
        [Required(ErrorMessage = "Please enter {0}")]
        public string Password { get; set; }


        public string DisplayName { get; set; }

        public int Role { get; set; }
    }

    private string GetSha256Hash(string input)
    {
        using (var hashAlgorithm = SHA256.Create())
        {
            var byteValue = Encoding.UTF8.GetBytes(input);
            var byteHash = hashAlgorithm.ComputeHash(byteValue);
            return Convert.ToBase64String(byteHash);
        }
    }
}
