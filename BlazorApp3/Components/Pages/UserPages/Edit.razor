@page "/Users/edit"
@inject BlazorApp3.Model.TournamentContext DB
@using BlazorApp3.Model
@inject NavigationManager NavigationManager
@using Microsoft.EntityFrameworkCore
@using System.ComponentModel.DataAnnotations

<PageTitle>Edit</PageTitle>

<h1>Edit</h1>

<h4>User</h4>
<hr />

    
<div class="row">
    <div class="col-md-4">
        <EditForm method="post" Model="User" OnValidSubmit="UpdateUser" FormName="edit" Enhance>
            <DataAnnotationsValidator />
            <ValidationSummary />
            <div class="mb-3">
                <label for="username" class="form-label">Username:</label>
                <span>@User.Username</span>
                        
            </div>
            <div class="mb-3">
                <label for="displayname" class="form-label">DisplayName:</label>
                <InputText id="displayname" @bind-Value="User.DisplayName" class="form-control" />
                <ValidationMessage For="() => User.DisplayName" class="text-danger" />
            </div>
            <div class="mb-3">
                <label for="isactive" class="form-label">IsActive:</label>
                <InputCheckbox id="isactive" @bind-Value="User.IsActive" class="form-check-input" />
                <ValidationMessage For="() => User.IsActive" class="text-danger" />
            </div>
            <div class="mb-3">
                <label for="Role" class="form-label">Role:</label>
                <select id="role" @bind-="@User.Role">
                @{
                        foreach (var item in roles)
                        {
                            <option value="@item.Id">@item.Name</option>
                        }
                    }
                </select>
                <ValidationMessage For="() => User.Role" class="text-danger" />
            </div>
            <button type="submit" class="btn btn-primary">Save</button>
        </EditForm>
    </div>
</div>



<div>
    <a href="/users">Back to List</a>
</div>

@code {
    [SupplyParameterFromQuery]
    public int Id { get; set; }

    [SupplyParameterFromForm]
    public UserDTOEdit? User { get; set; } = new UserDTOEdit();

    private List<Role> roles = new List<Role>();
    protected override async Task OnInitializedAsync()
    {
        User? currentUser = await DB.Users.FirstOrDefaultAsync(m => m.Id == Id);
        if (currentUser is null)
        {
            NavigationManager.NavigateTo("notfound");
        }
        User = new UserDTOEdit()
            {
                DisplayName = currentUser.DisplayName,
                IsActive = currentUser.IsActive,
                Username = currentUser.Username
            };
        var roleitem = await DB.UserRoles.Where(x => x.UserId == Id).FirstAsync();
        if (roleitem is null)
        {
            NavigationManager.NavigateTo("notfound");
        }
        User.Role = roleitem.RoleId;
        roles = DB.Roles.ToList();
        //StateHasChanged();
    }


    // To protect from overposting attacks, enable the specific properties you want to bind to.
    // For more details, see https://aka.ms/RazorPagesCRUD.
    public async Task UpdateUser()
    {
        User? currentUser  = await DB.Users.FirstOrDefaultAsync(m => m.Id == Id);
        currentUser.DisplayName = User.DisplayName;
        currentUser.Username = User.Username;
        currentUser.IsActive = User.IsActive;
        DB.Attach(currentUser!).State = EntityState.Modified;
        UserRole? roleitem = await DB.UserRoles.Where(x => x.UserId == Id).FirstAsync();
        DB.Attach(roleitem).State = EntityState.Modified;

        try
        {
            await DB.SaveChangesAsync();
        }
        catch (DbUpdateConcurrencyException)
        {
            if (!UserExists(currentUser!.Id))
            {
                NavigationManager.NavigateTo("notfound");
            }
            else
            {
                throw;
            }
        }

        NavigationManager.NavigateTo("/users");
    }

    bool UserExists(int id)
    {
        return DB.Users.Any(e => e.Id == id);
    }

    public class UserDTOEdit
    {
        [Display(Name = "Username")]
        public string? Username { get; set; }
        
        [Display(Name = "Is Active")]
        public bool IsActive { get; set; }

        [Display(Name = "Display Name")]
        public string DisplayName { get; set; }

        [Display(Name = "Role")]
        public int Role { get; set; }
    }
}
