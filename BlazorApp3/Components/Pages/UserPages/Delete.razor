@page "/users/delete"
@inject BlazorApp3.Model.TournamentContext DB
@using BlazorApp3.Model
@inject NavigationManager NavigationManager
@using Microsoft.EntityFrameworkCore

<PageTitle>Delete</PageTitle>

<h1>Delete</h1>

<h3>Are you sure you want to delete this?</h3>
<div>
    <h4>User</h4>
    <hr />
    @if (user is null)
    {
        <p><em>Loading...</em></p>
    }
    else {
        <dl class="row">
            <dt class="col-sm-2">Username</dt>
            <dd class="col-sm-10">@user.Username</dd>
        </dl>
       
        <dl class="row">
            <dt class="col-sm-2">DisplayName</dt>
            <dd class="col-sm-10">@user.DisplayName</dd>
        </dl>
        <dl class="row">
            <dt class="col-sm-2">IsActive</dt>
            <dd class="col-sm-10">@user.IsActive</dd>
        </dl>

        <dl class="row">
            <dt class="col-sm-2">Role</dt>
            <dd class="col-sm-10">@role.Name</dd>
        </dl>

        <EditForm method="post" Model="user" OnValidSubmit="DeleteUser" FormName="delete" Enhance>
            <button type="submit" class="btn btn-danger" disabled="@(user is null)">Delete</button> |
            <a href="/users">Back to List</a>
        </EditForm>
    }
</div>

@code {
    User? user;
    Role? role;

    [SupplyParameterFromQuery]
    public int Id { get; set; }

    protected override async Task OnInitializedAsync()
    {
        user = await DB.Users.FirstOrDefaultAsync(m => m.Id == Id);

        if (user is null)
        {
            NavigationManager.NavigateTo("notfound");
        }

        role = (from ur in DB.UserRoles.Where(x => x.UserId == user.Id)
                join ro in DB.Roles on ur.RoleId equals ro.Id
                select new Role { Id = ro.Id, Name = ro.Name }).First();

        if (role is null)
        {
            NavigationManager.NavigateTo("notfound");
        }
    }

    public async Task DeleteUser()
    {
        DB.Users.Remove(user!);
        await DB.SaveChangesAsync();
        NavigationManager.NavigateTo("/users");
    }
}
