@page "/users/delete"

@using BlazorApp3.Model
@using BlazorApp3.NewModels.DTOs
@using Microsoft.AspNetCore.Components.Authorization
@using Microsoft.EntityFrameworkCore
@inject BlazorApp3.Model.TournamentContext DB
@inject NavigationManager NavigationManager

<PageTitle>Delete</PageTitle>

<CascadingAuthenticationState>
    <AuthorizeView Roles="SiteAdmin" Context="a">
        <NotAuthorized>
            <p>Not authorized to view this page<br /></p>
        </NotAuthorized>
        <Authorized>
<h1>Delete</h1>

<h3>Are you sure you want to delete this?</h3>
    <div>
        <h4>User</h4>
    
            <dl class="row">
                <dt class="col-sm-2">Username</dt>
                    <dd class="col-sm-10">@userview.Username</dd>
            </dl>
       
            <dl class="row">
                <dt class="col-sm-2">DisplayName</dt>
                    <dd class="col-sm-10">@userview.DisplayName</dd>
            </dl>
            <dl class="row">
                <dt class="col-sm-2">IsActive</dt>
                    <dd class="col-sm-10">@userview.IsActive</dd>
            </dl>

            <dl class="row">
                <dt class="col-sm-2">Role</dt>
                    <dd class="col-sm-10">@userview.RoleName</dd>
            </dl>

    <EditForm method="post" Model="userview" OnValidSubmit="DeleteUser" FormName="delete" Enhance>
        <button type="submit" class="btn btn-danger" disabled="@(userview is null)">Delete</button> |
                    <a href="/users">Back to List</a>
                </EditForm>

        </div>
    </Authorized>
</AuthorizeView>
</CascadingAuthenticationState>


@code {
    UserDTOEdit? userview = new();

    [SupplyParameterFromQuery]
    public int Id { get; set; }

    
    public User? user;

    protected override async Task OnInitializedAsync()
    {
        user = await DB.Users.FirstOrDefaultAsync(x => x.Id == Id);

        userview = await (from u in DB.Users.Where(m => m.Id == Id)
                      join ur in DB.UserRoles on u.Id equals ur.UserId
                      join r in DB.Roles on ur.RoleId equals r.Id
                      select new UserDTOEdit
                          {
                              Username = u.Username,
                              Role = r.Id,
                              DisplayName = u.DisplayName,
                              IsActive = u.IsActive,
                              RoleName = r.Name
                          }).FirstOrDefaultAsync();


        if (user is null)
        {
            NavigationManager.NavigateTo("notfound");
        }

       

    }

    public async Task DeleteUser()
    {
        DB.Users.Remove(user!);
        await DB.SaveChangesAsync();
        NavigationManager.NavigateTo("/users");
    }
}
