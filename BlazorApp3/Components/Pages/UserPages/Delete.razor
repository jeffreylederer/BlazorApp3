@page "/users/delete"
@inject BlazorApp3.Model.TournamentContext DB
@using BlazorApp3.Model
@inject NavigationManager NavigationManager
@using BlazorApp3.Models.DTOs
@using Microsoft.AspNetCore.Components.Authorization
@using Microsoft.EntityFrameworkCore

<PageTitle>Delete</PageTitle>

<AuthorizeView Roles ="Scorer,Observer,Admin">
    NavigationManager.NavigateTo("/");
</AuthorizeView>


<h1>Delete</h1>

<h3>Are you sure you want to delete this?</h3>
<div>
    <h4>User</h4>
    <hr />
    @if (UserDB is null)
    {
        <p><em>Loading...</em></p>
    }
    else {
        <dl class="row">
            <dt class="col-sm-2">Username</dt>
            <dd class="col-sm-10">@User.Username</dd>
        </dl>
       
        <dl class="row">
            <dt class="col-sm-2">DisplayName</dt>
            <dd class="col-sm-10">@User.DisplayName</dd>
        </dl>
        <dl class="row">
            <dt class="col-sm-2">IsActive</dt>
            <dd class="col-sm-10">@User.IsActive</dd>
        </dl>

        <dl class="row">
            <dt class="col-sm-2">Role</dt>
            <dd class="col-sm-10">@User.RoleName</dd>
        </dl>

        <EditForm method="post" Model="UserDB" OnValidSubmit="DeleteUser" FormName="delete" Enhance>
            <button type="submit" class="btn btn-danger" disabled="@(UserDB is null)">Delete</button> |
            <a href="/users">Back to List</a>
        </EditForm>
    }
</div>

@code {
    UserDTOEdit? User { get; set; } = new ();

    [SupplyParameterFromQuery]
    public int Id { get; set; }

    [SupplyParameterFromForm]
    public User? UserDB { get; set; } = new ();

    protected override async Task OnInitializedAsync()
    {
        User = await (from u in DB.Users.Where(m => m.Id == Id)
                      join ur in DB.UserRoles on u.Id equals ur.UserId
                      join r in DB.Roles on ur.RoleId equals r.Id
                      select new UserDTOEdit
                          {
                              Username = u.Username,
                              Role = r.Id,
                              DisplayName = u.DisplayName,
                              IsActive = u.IsActive,
                              RoleName = r.Name
                          }).FirstOrDefaultAsync();


        if (User is null)
        {
            NavigationManager.NavigateTo("notfound");
        }

        User? UserDB = await DB.Users.FirstOrDefaultAsync(x => x.Id == Id);

    }

    public async Task DeleteUser()
    {
        DB.Users.Remove(UserDB!);
        await DB.SaveChangesAsync();
        NavigationManager.NavigateTo("/users");
    }
}
