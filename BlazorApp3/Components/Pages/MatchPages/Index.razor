@page "/matches"
@using BlazorApp3.Components.Layout
@inherits LayoutComponentBase
@layout LeagueLayout

@using Microsoft.AspNetCore.Components.Authorization
@using BlazorApp3.Model
@using Microsoft.EntityFrameworkCore
@using Microsoft.AspNetCore.Components.Server.ProtectedBrowserStorage
@using System.Text
@using Microsoft.AspNetCore.Components.QuickGrid

@inject ProtectedSessionStorage ProtectedSessionStore
@inject BlazorApp3.Model.TournamentContext DB
@rendermode InteractiveServer


<PageTitle>Index</PageTitle>

@{
    if (league != null)
    {

        <h1>Matches</h1>
        
           <span>Game Date:</span> <select  @onchange="(e=>Change(e))">
                @weeks
           </select>
           

        <p>
            <a href="matches/standingsreport?weekid=@thisweekid">This week's standings report</a><br />
            <a href="matches/scorecardreportt?weekid=@thisweekid" target="_blank">This week's score cards</a><br />
        </p>
        if (!@playoff)
        {
           <QuickGrid Class="table table-striped table-condensed" Items="@QModel" >
                <TemplateColumn Context="league" Title="Exchange Rink" >
                @if(league.Rink > 1)
                {
                    <CascadingAuthenticationState>
                    <AuthorizeView Roles ="Admin,SiteAdmin">
                            <a @onclick="(() => Moveup(league.Rink))" ><img src="images/uparrow.png" /></a>
                    </AuthorizeView>
                    </CascadingAuthenticationState>
                }
                </TemplateColumn>
                <PropertyColumn Property="Model => Model.Rink" Title="Rink" Align="Align.Center" />
                <TemplateColumn Context="team1" Title="Team 1">
                    <span style="@team1.Team1Style">@team1.Team1Players</span>
                </TemplateColumn>
                <TemplateColumn Context="team2" Title="Team 2">
                    <span style="@team2.Team2Style">@team2.Team2Players</span>
                </TemplateColumn>
                <PropertyColumn Property="Model => Model.Team1Score" Title="Team 1 Score" Align="Align.Center" />
                <PropertyColumn Property="Model => Model.Team2Score" Title="Team 2 Score" Align="Align.Center" />
                <PropertyColumn Property="Model => Model.Forfeit" Title="Team Forfeiting" />
                <TemplateColumn Context="match">
                 <CascadingAuthenticationState>
                    <AuthorizeView Roles ="Admin,SiteAdmin,Scorer">
                            <a href="@($"matches/scoring?id={match.Id}")">Scoring</a>
                    </AuthorizeView>
                    </CascadingAuthenticationState>
                </TemplateColumn>
            </QuickGrid>
 
            <span style="color: red;">Teams with players in wheelchairs are highlighted in red</span>
        }
        else
        {
            <p>This is a playoff week</p>
        }

        
    }
    else
    {
        <p>Loading...</p>
    }
}

@code
{
    int? leagueid;
    League? league;
    int thisweekid;
    bool playoff;
    IQueryable<WeekItems>? QModel=null;
    MarkupString? weeks;
    [SupplyParameterFromForm]
    MySchedule schedule { get; set; } = new();

    [SupplyParameterFromQuery]
    private int? Id { get; set; }



    protected override async Task OnAfterRenderAsync(bool firstTime)
    {
        if (firstTime)
        {
            ProtectedBrowserStorageResult<int> result = await ProtectedSessionStore.GetAsync<int>("leagueid");
            if(result.Success)
            {
                leagueid = result.Value;
                league = DB.Leagues.Find(leagueid.Value);
                if (league != null)
                {
                    Schedule? week = DB.Schedules.Where(x => x.Leagueid == leagueid.Value).FirstOrDefault(); ;
                    if (Id.HasValue)
                        thisweekid = Id.Value;
                    else
                    {
                        thisweekid = week.Id;
                    }
                    playoff = week.PlayOffs;
                    SetupWeek(thisweekid);

                }
            }
        }
    }


    private void SetupWeek(int weekid)
    {
        thisweekid = weekid;
        schedule.Id = thisweekid;

        StringBuilder optionsList = new StringBuilder();
        foreach (var item in DB.Schedules.Where(x => x.Leagueid == league.Id).OrderBy(x=>x.GameDate).ToList())
        {
            if (item.Id == thisweekid)
                optionsList.AppendLine($"<option value='{@item.Id}' selected>{@item.GameDate.ToShortDateString()}</option>");
            else
                optionsList.AppendLine($"<option value='{@item.Id}'>{@item.GameDate.ToShortDateString()}</option>");
        }
        weeks = new MarkupString(optionsList.ToString());


        if (!playoff)
        {
            List<WeekItems> Model = new List<WeekItems>();
            foreach(MatchView view in DB.MatchViews.Where(x=>x.Weekid == thisweekid).OrderBy(x=>x.Rink).ToList())
            {
                WeekItems item = new WeekItems()
                    {
                        Team1No = view.TeamNo1,
                        Team2No = view.TeamNo2,
                        Team1Score = view.Team1Score,
                        Team2Score = view.Team2Score,
                        Rink = view.Rink,
                        Forfeit = view.ForFeitId == 0 ? "" : (view.ForFeitId == -1 ? "Both" : $"Team No. {view.ForFeitId}"),
                        Id = view.Id,
                        Team1Id = view.Team1Id,
                        Team2Id = view.Team2Id
                    };
                item.Team1Players = $"{item.Team1No}({view.Skip1})";
                item.Team2Players =  $"{item.Team2No}({view.Skip2})";
                item.Team1Style = view.Skip1W.Value ? "color:red;" : "";
                item.Team2Style = view.Skip2W.Value ? "color:red;" : "";


                if (league.TeamSize < 3)
                {
                    item.Team1Players = $"{item.Team1No}({view.Skip1}, {view.Lead1})";
                    item.Team2Players = $"{item.Team2No}({view.Skip2}, {view.Lead1})";
                    item.Team1Style = view.Skip1W.Value || view.Lead1W.Value ? "color:red;" : "";
                    item.Team2Style = view.Skip2W.Value || view.Lead2W.Value ? "color:red;" : "";
                }

                if (league.TeamSize == 3)
                {
                    item.Team1Players = $"{item.Team1No}({view.Skip1}, {view.Vice1}, {view.Lead1})";
                    item.Team2Players = $"{item.Team2No}({view.Skip2}, {view.Vice2}, {view.Lead1})";
                    item.Team1Style = view.Skip1W.Value || view.Vice1W.Value || view.Lead1W.Value ? "color:red;" : "";
                    item.Team2Style = view.Skip2W.Value || view.Vice2W.Value || view.Lead2W.Value ? "color:red;" : "";
                }

                Model.Add(item);
            }
            
            QModel = Model.AsQueryable();
        }
        StateHasChanged();
    }

    private void Change(ChangeEventArgs e)
    {
        int id = int.Parse(e.Value.ToString()); ;
        SetupWeek(id);
    }

    private async Task  Moveup(int rink)
    {
        var Model = QModel.ToList();
        var index = Model.FindIndex(s => s.Rink == rink);
        if (index > 0)
        {
            var rink2 = Model[index-1].Rink;

            var mr1 = await DB.Matches.Where(x => x.WeekId == thisweekid && x.Rink == rink).FirstOrDefaultAsync();
            var mr2 = await DB.Matches.Where(x => x.WeekId == thisweekid && x.Rink == rink2).FirstOrDefaultAsync();
            mr1.Rink = rink2;
            mr2.Rink = rink;
            DB.Attach(mr1!).State = EntityState.Modified;
            DB.Attach(mr2!).State = EntityState.Modified;
            try
            {
                await DB.SaveChangesAsync();
            }
            catch (DbUpdateConcurrencyException) { }
            SetupWeek(mr1.WeekId);
        }
    }


    private class WeekItems
    {
        public int Id { get; set; }
        public int Rink { get; set; }
        public string? Team1Players { get; set; }
        public int Team1Id { get; set; }
        public string? Team1Style { get; set; }
        public int Team1Score { get; set; }
        public int Team1No { get; set; }
        public string? Team2Players { get; set; }
        public int Team2Score { get; set; }
        public int Team2No { get; set; }
        public int Team2Id { get; set; }
        public string? Team2Style { get; set; }
        public string? Forfeit { get; set; }
    }

    private class Weeks
    {
        public int weekid { get; set; }
        public string? date { get; set; }
    }

    
    public class MySchedule
    {
        public int Id { get; set; }
    }
}
