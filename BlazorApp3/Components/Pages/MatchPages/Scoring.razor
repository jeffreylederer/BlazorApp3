@page "/matches/scoring"
@using BlazorApp3.Components.Layout
@inherits LayoutComponentBase
@layout LeagueLayout

@using Microsoft.EntityFrameworkCore
@inject BlazorApp3.Model.TournamentContext DB
@using BlazorApp3.Model
@using System.Text
@inject NavigationManager NavigationManager
@rendermode InteractiveServer

<h3>Scoring</h3>

<h3>Match</h3>


    @if(string.IsNullOrEmpty(GameDate))
    {
        <p>Loading...</p>
    }
    else
    {
         <div class="row">
            <div class="col-md-4">
                <EditForm method="post" Model="TheScore" OnValidSubmit="UpdateScore" FormName="edit" Enhance>
                    <DataAnnotationsValidator />
                    <ValidationSummary />

                    <div class="mb-3">
                        <label>Geame Date:</label>
                       @GameDate
                    </div>
                    <div class="mb-3">
                        <label>Rink:</label>
                        @rink
                    </div>
                    <div class="mb-3">
                        <label for="team1members" class="form-label">@team1members:</label>
                        <fieldset disabled="@IsDisabled">
                            <InputNumber id="team1members" @bind-Value="TheScore.Team1Score" class="form-control" style="width:200px;"  />
                        </fieldset>
                        <ValidationMessage For="() => TheScore.Team1Score" class="text-danger" />
                    </div>
                    <div class="mb-3">
                        <label for="team2members" class="form-label">@team2members:</label>
                        <fieldset disabled="@IsDisabled">
                            <InputNumber id="team2members" @bind-Value="TheScore.Team2Score" class="form-control" style="width:200px;" />
                        </fieldset>
                        <ValidationMessage For="() => TheScore.Team2Score" class="text-danger" />
                    </div>

                    <div class="mb-3">
                    <label for="teamforfeit" class="form-label">Team Forfeiting:</label>

                    <select class="form-control" id="teamforfeit" style="width:200px;" @bind="TheScore.TeamForfeit" @bind:after="Changed">
                            @options
                        </select>
                        <ValidationMessage For="() => TheScore.TeamForfeit" class="text-danger" />
                    </div>
                <button type="submit" class="btn btn-primary">Save</button>
                </EditForm>
            </div>
        </div>

        <a href="matches?id=@weekid">Back to List</a>
    }


@code {
    [SupplyParameterFromQuery]
    private int Id { get; set; }

    [SupplyParameterFromForm]
    private Scrore? TheScore { get; set; } = new Scrore();

    private string team1members;
    private string team2members;

    private MarkupString? options;

    private string? GameDate;

    private int weekid;

    private int rink;

    private bool IsDisabled { get; set; }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            var match = await DB.Matches.FirstOrDefaultAsync(x => x.Id == Id);
            if (match is null)
            {
                NavigationManager.NavigateTo("notfound");
            }

            Classes? theclasses = await (from m in DB.Matches.Where(x => x.Id == Id)
                                         join s in DB.Schedules on m.WeekId equals s.Id
                                         join l in DB.Leagues on s.Leagueid equals l.Id
                                         select new Classes { league = l, schedule = s }).FirstOrDefaultAsync();

            var league = theclasses.league;
            var schedule = theclasses.schedule;
            weekid = schedule.Id;
            TheTeams? teams = await (from m in DB.Matches.Where(x => x.Id == Id)
                                     join t1 in DB.Teams on m.TeamNo1 equals t1.Id
                                     select new TheTeams { team = t1 }).FirstOrDefaultAsync();
            Team? team1 = teams.team;
            teams = await (from m in DB.Matches.Where(x => x.Id == Id)
                           join t1 in DB.Teams on m.TeamNo2 equals t1.Id
                           select new TheTeams { team = t1 }).FirstOrDefaultAsync();
            Team? team2 = teams.team;

            Name? skip1 = await (from p in DB.Players.Where(x => x.Id == team1.Skip)
                                 join m in DB.Memberships on p.MembershipId equals m.Id
                                 select new Name { NickName = m.NickName }).FirstOrDefaultAsync();

            Name? skip2 = await (from p in DB.Players.Where(x => x.Id == team2.Skip)
                                 join m in DB.Memberships on p.MembershipId equals m.Id
                                 select new Name { NickName = m.NickName }).FirstOrDefaultAsync();
            Name? lead1 = null, lead2 = null, viceskip1 = null, viceskip2 = null;



            if (league.TeamSize < 3)
            {
                lead1 = await (from p in DB.Players.Where(x => x.Id == team1.Lead)
                               join m in DB.Memberships on p.MembershipId equals m.Id
                               select new Name { NickName = m.NickName }).FirstOrDefaultAsync();

                lead2 = await (from p in DB.Players.Where(x => x.Id == team2.Lead)
                               join m in DB.Memberships on p.MembershipId equals m.Id
                               select new Name { NickName = m.NickName }).FirstOrDefaultAsync();
            }

            if (league.TeamSize == 3)
            {
                viceskip1 = await (from p in DB.Players.Where(x => x.Id == team1.ViceSkip)
                                   join m in DB.Memberships on p.MembershipId equals m.Id
                                   select new Name { NickName = m.NickName }).FirstOrDefaultAsync();

                viceskip2 = await (from p in DB.Players.Where(x => x.Id == team2.ViceSkip)
                                   join m in DB.Memberships on p.MembershipId equals m.Id
                                   select new Name { NickName = m.NickName }).FirstOrDefaultAsync();
            }

            if (league.TeamSize == 1)
            {
                team1members = $"Team {team1.TeamNo} ({skip1.NickName})";
                team2members = $"Team {team2.TeamNo} ({skip2.NickName})";
            }
            else if (league.TeamSize < 3)
            {
                team1members = $"Team {team1.TeamNo} ({skip1.NickName}, {lead1.NickName})";
                team2members = $"Team {team2.TeamNo} ({skip2.NickName}, {lead2.NickName})";
            }
            else if (league.TeamSize == 3)
            {
                team1members = $"Team {team1.TeamNo} ({skip1.NickName}, {viceskip1.NickName}, {lead1.NickName})";
                team2members = $"Team {team2.TeamNo} ({skip2.NickName}, {viceskip2.NickName}, {lead2.NickName})";
            }



            rink = match.Rink;
            GameDate = match.Week.GameDate.ToShortDateString();
            TheScore.Team1Score = match.Team2Score;
            TheScore.Team2Score = match.Team2Score;
            TheScore.TeamForfeit = match.ForFeitId;
            IsDisabled = match.ForFeitId != 0;
            string selected;

            StringBuilder optionstr = new StringBuilder();
            optionstr.AppendLine($"<option value='0'>No Forfeit</option>");
            optionstr.AppendLine($"<option value='{team1.TeamNo}'>Team No. {team1.TeamNo}</option>");
            optionstr.AppendLine($"<option value='{team2.TeamNo}'>Team No. {team2.TeamNo}</option>");
            optionstr.AppendLine($"<option value='-1'>Both</ option > ");
            options = new MarkupString(optionstr.ToString());
            StateHasChanged();
        }
    }

    private async Task UpdateScore()
    {
        if(TheScore.TeamForfeit != 0)
        {
            TheScore.Team1Score = 0;
            TheScore.Team2Score = 0;
        }

        var match = await DB.Matches.FirstOrDefaultAsync(x => x.Id == Id);
        match.ForFeitId = TheScore.TeamForfeit;
        match.Team1Score = TheScore.Team1Score;
        match.Team2Score = TheScore.Team2Score;

        DB.Attach(match!).State = EntityState.Modified;
        try
        {
            await DB.SaveChangesAsync();
        }
        catch (DbUpdateConcurrencyException)
        {
            throw;
        }

        NavigationManager.NavigateTo($"/matches?id={match.Week.Id}");
    }

    private void Changed()
    {
        if (TheScore.TeamForfeit != 0)
        {
            TheScore.Team2Score = 0;
            TheScore.Team1Score = 0;
            IsDisabled = true;
        }
        else
            IsDisabled = false;
        StateHasChanged();
    }

    private class Scrore
    {
        public int Team1Score {get;set;}
        public int Team2Score {get;set;}
        public int TeamForfeit { get; set; }
    }

    private class Name
    {
        public string? NickName { get; set; }
    }

    public class Classes
    {
        public League? league { get; set; }
        public Schedule? schedule { get; set; }
    }

    public class TheTeams
    {
        public Team? team { get; set; }
        
    }
}
